package main
//
//import (
//		"github.com/hyperledger/fabric/core/chaincode/shim"
//	"github.com/hyperledger/fabric/protos/peer"
//)
//
//// Define the Smart Contract structure
//type SmartContract struct {
//}
//
//func (s *SmartContract) Init(APIstub shim.ChaincodeStubInterface) peer.Response {
//	return shim.Success(nil)
//}
//
//func (s *SmartContract) Invoke(APIstub shim.ChaincodeStubInterface) peer.Response {
//	function, args := APIstub.GetFunctionAndParameters()
//
//	if function == "test" {
//		return s.test(APIstub, args)
//	}
//	return shim.Error("Invalid Smart Contract function name.")
//}
//
//func (s *SmartContract) test(stubInterface shim.ChaincodeStubInterface, strings []string) peer.Response {
//	return shim.Success([]byte("test"))
//}

//
//type CRMInfo struct {
//	RequestHash          string
//	CopyrightOwner       string
//	Title                string
//	Type                 string
//	RequestTime          string
//	CreationCompleteTime string
//	FirstPublishTime     string
//	RequestUserId        string
//	Fingerprint          string
//	DownloadUrl          string
//	SigAlgorithm         string
//	DCI                  string
//	DCIHash              string
//	DCISigAlgorithm      string
//	DCIStatus            string
//}
//
//type Event struct {
//	Txid string
//	Hash string
//}
//
///*
// * The Init method is called when the Smart Contract "fabcar" is instantiated by the blockchain network
// * Best practice is to have any Ledger initialization in separate function -- see initLedger()
// */
//func (s *contract) Init(APIstub shim.ChaincodeStubInterface) sc.Response {
//	return shim.Success(nil)
//}
//
///*
// * The Invoke method is called as a result of an application request to run the Smart Contract "fabcar"
// * The calling application program has also specified the particular smart contract function to be called, with arguments
// */
//func (s *contract) Invoke(APIstub shim.ChaincodeStubInterface) sc.Response {
//
//	// Retrieve the requested Smart Contract function and arguments
//	function, args := APIstub.GetFunctionAndParameters()
//	// Route to the appropriate handler function to interact with the ledger appropriately
//	if function == "uploadPreRegister" {
//		return s.uploadPreRegister(APIstub, args)
//	} else if function == "uploadDCI" {
//		return s.uploadDCI(APIstub, args)
//	} else if function == "expiredDCI" {
//		return s.expiredDCI(APIstub, args)
//	} else if function == "queryInfo" {
//		return s.queryInfo(APIstub, args)
//	}
//
//	return shim.Error("Invalid Smart Contract function name.")
//}
//
//func (s *contract) uploadPreRegister(APIstub shim.ChaincodeStubInterface, args []string) sc.Response {
//	if len(args) != 11 {
//		return shim.Error("Incorrect number of arguments. Expecting 11")
//	}
//	newRow := CRMInfo{args[0], args[1], args[2],
//		args[3], args[4], args[5],
//		args[6], args[7], args[8],
//		args[9], args[10], "", "", "", ""}
//	requestAsBytes, _ := json.Marshal(newRow)
//	APIstub.PutState(args[0], requestAsBytes)
//
//	APIstub.SetEvent("Upload PreRegister", writeEvent(APIstub.GetTxID(), args[0]))
//	return shim.Success([]byte("upload success"))
//}
//
//func (s *contract) uploadDCI(APIstub shim.ChaincodeStubInterface, args []string) sc.Response {
//	if len(args) != 5 {
//		return shim.Error("Incorrect number of arguments. Expecting 5")
//	}
//	rowAsBytes, _ := APIstub.GetState(args[0])
//	row := CRMInfo{}
//	json.Unmarshal(rowAsBytes, &row)
//	row.DCI = args[1]
//	row.DCIHash = args[2]
//	row.DCISigAlgorithm = args[3]
//	row.DCIStatus = args[4]
//
//	APIstub.SetEvent("DCI upload", writeEvent(APIstub.GetTxID(), args[0]))
//	return shim.Success([]byte("DCI upload success"))
//}
//
//func (s *contract) expiredDCI(APIstub shim.ChaincodeStubInterface, args []string) sc.Response {
//	if len(args) != 2 {
//		return shim.Error("Incorrect number of arguments. Expecting 2")
//	}
//	rowAsBytes, _ := APIstub.GetState(args[0])
//	row := CRMInfo{}
//	json.Unmarshal(rowAsBytes, &row)
//	row.DCIStatus = args[1]
//
//	APIstub.SetEvent("expired DCI upload",writeEvent(APIstub.GetTxID(), args[0]))
//	return shim.Success([]byte("DCI expired upload success"))
//}
//
//func (s *contract) queryInfo(APIstub shim.ChaincodeStubInterface, args []string) sc.Response {
//	if len(args) != 1 {
//		return shim.Error("Incorrect number of arguments. Expecting 1")
//	}
//	rowAsBytes, _ := APIstub.GetState(args[0])
//	row := CRMInfo{}
//	json.Unmarshal(rowAsBytes, &row)
//
//	return shim.Success([]byte("success"))
//}
//
//func writeEvent(txid string, hash string) []byte {
//	var buffer bytes.Buffer
//	buffer.WriteString("{\"Txid\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(txid)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"Hash\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(hash)
//	buffer.WriteString("\"")
//	buffer.WriteString("}")
//	return buffer.Bytes()
//}
//
//func writeInfo(crmInfo CRMInfo) []byte {
//	var buffer bytes.Buffer
//	buffer.WriteString("{\"Hash\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.RequestHash)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"CopyrightOwner\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.CopyrightOwner)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"Title\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.Title)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"Type\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.Type)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"RequestTime\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.RequestTime)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"CreationCompleteTime\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.CreationCompleteTime)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"FirstPublishTime\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.FirstPublishTime)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"RequestUserId\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.RequestUserId)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"Fingerprint\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.Fingerprint)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"DownloadUrl\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.DownloadUrl)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"SigAlgorithm\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.SigAlgorithm)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"DCI\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.DCI)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"DCIHash\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.DCIHash)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"DCISigAlgorithm\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.DCISigAlgorithm)
//	buffer.WriteString("\"")
//
//	buffer.WriteString(", \"DCIStatus\":")
//	buffer.WriteString("\"")
//	buffer.WriteString(crmInfo.DCIStatus)
//	buffer.WriteString("\"")
//
//	buffer.WriteString("}")
//
//	fmt.Printf("- writeInfo:\n%s\n", buffer.String())
//	return buffer.Bytes()
//}
//
// The main function is only relevant in unit test mode. Only included here for completeness.
//func main() {
//
//	// Create a new Smart Contract
//	err := shim.Start(new(SmartContract))
//	if err != nil {
//		fmt.Printf("Error creating new Smart Contract: %s", err)
//	}
//}
